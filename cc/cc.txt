#点击菜单File(F)--import
self.engineering_window.set_focus()  # 激活窗口
mouse.click(coords=self.get_engineering_file_Coor())# 使用鼠标单击按钮,需要先激活窗口

self.engineering_window.print_control_identifiers()


self.top_window = RunConfig.driver_epcam_ui.top_window()
self.top_window.print_control_identifiers()


mouse.click(coords=engineering_import_input_path_file_type_window.rectangle().mid_point())# 使用鼠标单击按钮

engineering_import_input_path_file_type_window.select(1)#根据index选择下拉列表项


# 切换到import job窗口
engineering_import_window = self.engineering_window.child_window(title="Import Job", control_type="Window")



cv2.waitKey(0)
在OpenCV中，cv2.waitKey()函数用于等待用户按下一个键，并且它与图像显示有关。
如果你在图像显示之后使用cv2.waitKey(0)，它会暂停程序的执行，等待用户按下任意键。这在你想要让程序停留在图像显示窗口的情况下很有用，以便用户可以查看图像，然后按下任意键来继续程序的执行。
如果你在图像显示之前使用cv2.waitKey(delay)，它会在显示图像后等待一段时间（以毫秒为单位），然后继续程序的执行。这在你想要让图像显示窗口自动关闭或在一段时间后继续执行程序时很有用。如果你将delay设置为0，它会立即继续执行程序。


# 加载两张图片
img_standard_path = os.path.join(Path(os.path.dirname(__file__)).parent, r'data\pic\engineering\engineering_menu_language_Simplified_Chinese_standard.jpg')
img_current_path = r'C:\cc\share\temp\engineering_menu.jpg'
rectangle_count = opencv_compare(img_standard_path,img_current_path)
return rectangle_count == 0


# engineering_window_pic.save(r'C:\cc\share\temp\engineering_window.png')
# img = cv2.imread(r'C:\cc\share\temp\engineering_window.png')
img = np.array(engineering_window_pic)  # Convert the PIL image to a numpy array,此方法不需要把截图保存到硬盘的。
img_cut = img[30:60, 10:40]#后面的是水平方向,file
# cv2.imwrite(r"C:\cc\share\temp\engineering_menu_file.png", img_cut)
text = pytesseract.image_to_string(img_cut)# 使用Tesseract进行文字识别
assert text == 'File\n'

if os.path.exists(temp_path):
    # 删除目录及其内容
    # os.remove(temp_path)
    shutil.rmtree(temp_path)
os.mkdir(temp_path)

from PIL import Image
image = Image.open(image_path)  # 打开图像

graphic_size=(0,0,1382,807)#(L0, T0, R1382, B807)



# 使用OpenCV显示图像
cv2.imshow("Cropped Image", img_cut)
cv2.waitKey(0)  # 等待按键按下后关闭图像窗口
# 保存图像
cv2.imwrite(r"C:\cc\share\temp\engineering_window_job_info.png", img_cut)
# 关闭所有窗口
cv2.destroyAllWindows()


img_cut = engineering_window_pic.crop((10, 30, 42, 60))  # 截取图像# PIL裁剪坐标是左上右下
img_cut.show()# 显示图像
text = pytesseract.image_to_string(img_cut)# 使用Tesseract进行文字识别
assert text == 'File\n'


engineering_window_pic = my_engineering.engineering_window.capture_as_image()# 截图
engineering_window_pic.save(r'C:\cc\share\temp\engineering_window.png')#保存到硬盘
# 显示图像
engineering_window_pic.show()#PIL方式显示图像




img = np.array(engineering_window_pic)  # Convert the PIL image to a numpy array,此方法不需要把截图保存到硬盘的。
img_cut = img[30:60, 70:120]  #另一种方式裁剪， 后面的是水平方向,action
text = pytesseract.image_to_string(img_cut)# 使用Tesseract进行文字识别
assert text == 'Action\n'








# 加载epcam
@pytest.fixture(scope='session', autouse=False)
def epcam_kernel_start():
    """
    全局定义epcam驱动
    :return:
    """
    global driver_epcam

    if RunConfig.driver_type == "epcam_kernel":
        from epkernel import Configuration
        Configuration.init(RunConfig.ep_cam_path)
        Configuration.set_sysattr_path(os.path.join(RunConfig.ep_cam_path,r'config\attr_def\sysattr'))
        Configuration.set_userattr_path(os.path.join(RunConfig.ep_cam_path,r'config\attr_def\userattr'))

        driver_epcam = None

    else:
        raise NameError("driver驱动类型定义错误！")

    RunConfig.driver_epcam = driver_epcam


for box in text_boxes.splitlines():
    box_data = box.split()
    character, x, y, w, h = box_data[0], int(box_data[1]), int(box_data[2]), int(box_data[3]), int(box_data[4])
    # 获取字符的文本内容
    character_text = character
    # 计算相对于图像左上角的坐标
    relative_x = x / image_width
    relative_y = 1.0 - (y / image_height)
    print(f"Text: {character_text}, Relative X: {relative_x}, Relative Y: {relative_y}")

from cc.cc_method import get_print_control_identifiers_text, get_coord_of_object, DMS
class Engineering(object):
    # 获得坐标
    def getCoor(self,window,wanted_title):
        win_text = get_print_control_identifiers_text(window)
        coor_ok = get_coord_of_object(wanted_title, win_text)
        return coor_ok

    def get_engineering_left_top_Coor(self):
        win_text2 = get_print_control_identifiers_text(self.engineering_window)
        coor_ok = get_coord_of_object(RunConfig.driver_epcam_ui_engineering_title, win_text2)
        return coor_ok








